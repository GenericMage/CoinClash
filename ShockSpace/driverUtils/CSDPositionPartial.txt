/*
 SPDX-License-Identifier: BSD-3-Clause
*/

// Recent Changes:
// - 2025-05-30: Updated prepEnterLong to use xLiquid and prepEnterShort to use yLiquid from liquidityDetailsView.
// - 2025-05-30: Version incremented to 0.0.4 for pre-testing.
// - 2025-05-29: Added margin deduction in prepCloseLong/prepCloseShort.
// - 2025-05-29: Version incremented to 0.0.2 for pre-testing.
// - 2025-05-29: Updated prepEnterLong/prepEnterShort to transfer taxedMargin and excessMargin to listingAddress, track in makerTokenMargin.
// - 2025-05-29: Updated liquidation price to use makerTokenMargin[maker][token].
// - 2025-05-29: Replaced entryPrice with minEntryPrice/maxEntryPrice.
// - 2025-05-29: Updated fee to (leverage - 1) * initialMargin / 100.
// - 2025-05-29: Updated closeLongPosition/closeShortPosition to create PayoutUpdate without margin deduction.

pragma solidity 0.8.1;

import "./CSDUtilityPartial.sol";

contract CSDPositionPartial is CSDUtilityPartial {
    struct PrepPosition {
        uint256 fee;
        uint256 taxedMargin;
        uint256 leverageAmount;
        uint256 initialLoan;
        uint256 liquidationPrice;
    }

    function computeFee(uint256 initialMargin, uint8 leverage) internal pure returns (uint256) {
        uint256 feePercent = uint256(leverage) - 1;
        return (initialMargin * feePercent * DECIMAL_PRECISION) / 100 / DECIMAL_PRECISION;
    }

    function prepEnterLong(
        uint256 positionId,
        uint256 minEntryPrice,
        uint256 maxEntryPrice,
        uint256 initialMargin,
        uint256 excessMargin,
        uint8 leverage,
        address listingAddress,
        address maker
    ) internal returns (PrepPosition memory prep) {
        require(leverage >= 2 && leverage <= 100, "Invalid leverage");
        (uint256 currentPrice, uint256 minPrice, uint256 maxPrice,) = parseEntryPrice(minEntryPrice, maxEntryPrice, listingAddress);

        prep.fee = computeFee(initialMargin, leverage);
        prep.taxedMargin = initialMargin - prep.fee;
        prep.leverageAmount = initialMargin * uint256(leverage);
        require(excessMargin <= prep.leverageAmount, "Excess margin too high");

        // Fetch xLiquid from liquidity contract for long position leverage limit
        address liquidityAddr = ISSListing(listingAddress).liquidityAddresses(listingAddress);
        (uint256 xLiquid,,,) = ISSLiquidityTemplate(liquidityAddr).liquidityDetailsView();
        uint256 limitPercent = 101 - uint256(leverage);
        uint256 limit = xLiquid * limitPercent / 100;
        require(prep.leverageAmount <= limit, "Leverage amount exceeds limit");

        address tokenB = ISSListing(listingAddress).tokenB();
        transferMargin(address(this), tokenB, initialMargin);
        transferMargin(liquidityAddr, tokenB, prep.fee);
        ISSLiquidityTemplate(liquidityAddr).addFees(address(this), true, prep.fee);

        transferMargin(listingAddress, tokenB, prep.taxedMargin);
        transferMargin(listingAddress, tokenB, excessMargin);
        makerTokenMargin[maker][tokenB] += prep.taxedMargin + excessMargin;
        if (makerTokenMargin[maker][tokenB] == prep.taxedMargin + excessMargin) {
            makerMarginTokens[maker].push(tokenB);
        }

        prep.initialLoan = prep.leverageAmount / minPrice;
        uint256 marginRatio = makerTokenMargin[maker][tokenB] / prep.leverageAmount;
        prep.liquidationPrice = marginRatio < minPrice ? minPrice - marginRatio : 0;

        return prep;
    }

    function prepEnterShort(
        uint256 positionId,
        uint256 minEntryPrice,
        uint256 maxEntryPrice,
        uint256 initialMargin,
        uint256 excessMargin,
        uint8 leverage,
        address listingAddress,
        address maker
    ) internal returns (PrepPosition memory prep) {
        require(leverage >= 2 && leverage <= 100, "Invalid leverage");
        (uint256 currentPrice, uint256 minPrice, uint256 maxPrice,) = parseEntryPrice(minEntryPrice, maxEntryPrice, listingAddress);

        prep.fee = computeFee(initialMargin, leverage);
        prep.taxedMargin = initialMargin - prep.fee;
        prep.leverageAmount = initialMargin * uint256(leverage);
        require(excessMargin <= prep.leverageAmount, "Excess margin too high");

        // Fetch yLiquid from liquidity contract for short position leverage limit
        address liquidityAddr = ISSListing(listingAddress).liquidityAddresses(listingAddress);
        (, uint256 yLiquid,,) = ISSLiquidityTemplate(liquidityAddr).liquidityDetailsView();
        uint256 limitPercent = 101 - uint256(leverage);
        uint256 limit = yLiquid * limitPercent / 100;
        require(prep.leverageAmount <= limit, "Leverage amount exceeds limit");

        address tokenA = ISSListing(listingAddress).tokenA();
        transferMargin(address(this), tokenA, initialMargin);
        transferMargin(liquidityAddr, tokenA, prep.fee);
        ISSLiquidityTemplate(liquidityAddr).addFees(address(this), false, prep.fee);

        transferMargin(listingAddress, tokenA, prep.taxedMargin);
        transferMargin(listingAddress, tokenA, excessMargin);
        makerTokenMargin[maker][tokenA] += prep.taxedMargin + excessMargin;
        if (makerTokenMargin[maker][tokenA] == prep.taxedMargin + excessMargin) {
            makerMarginTokens[maker].push(tokenA);
        }

        prep.initialLoan = prep.leverageAmount * minPrice;
        uint256 marginRatio = makerTokenMargin[maker][tokenA] / prep.leverageAmount;
        prep.liquidationPrice = minPrice + marginRatio;

        return prep;
    }

    function prepCloseLong(
        uint256 positionId,
        address listingAddress
    ) internal returns (uint256 payout) {
        PositionCore1 storage core1 = positionCore1[positionId];
        MarginParams1 storage margin1 = marginParams1[positionId];
        MarginParams2 storage margin2 = margin2[positionId];
        PriceParams1 storage price1 = priceParams1[positionId];
        ExitParams storage exit = exitParams[positionId];

        uint256 currentPrice = ISSListing(listingAddress).prices(listingAddress);
        address tokenB = ISSListing(listingAddress).tokenB();
        payout = (margin1.taxedMargin + makerTokenMargin[core1.makerAddress][tokenB] + price1.leverage * margin1.initialMargin) / currentPrice - margin2.initialLoan;

        makerTokenMargin[core1.makerAddress][tokenB] -= (margin1.taxedMargin + margin1.excessMargin);
        if (makerTokenMargin[core1.makerAddress][tokenB] == 0) {
            _removeToken(core1.makerAddress, tokenB);
        }

        ISSListing.PayoutUpdate[] memory updates = new ISSListing.PayoutUpdate[](1);
        updates[0] = ISSListing.PayoutUpdate({
            payoutType: core1.positionType,
            recipient: core1.makerAddress,
            required: payout
        });
        ISSListing(listingAddress).ssUpdate(address(this), updates);

        exit.exitPrice = currentPrice;
        positionCore2[positionId].status2 = 1;
    }

    function prepCloseShort(
        uint256 positionId,
        address listingAddress
    ) internal returns (uint256 payout) {
        PositionCore1 storage core1 = positionCore1[positionId];
        MarginParams1 storage margin1 = marginParams1[positionId];
        PriceParams1 storage price1 = priceParams1[positionId];
        ExitParams storage exit = exitParams[positionId];

        uint256 currentPrice = ISSListing(listingAddress).prices(listingAddress);
        address tokenA = ISSListing(listingAddress).tokenA();
        payout = (price1.minEntryPrice - currentPrice) * margin1.initialMargin * price1.leverage + (margin1.taxedMargin + makerTokenMargin[core1.makerAddress][tokenA]) * currentPrice;

        makerTokenMargin[core1.makerAddress][tokenA] -= (margin1.taxedMargin + margin1.excessMargin);
        if (makerTokenMargin[core1.makerAddress][tokenA] == 0) {
            _removeToken(core1.makerAddress, tokenA);
        }

        ISSListing.PayoutUpdate[] memory updates = new ISSListing.PayoutUpdate[](1);
        updates[0] = ISSListing.PayoutUpdate({
            payoutType: core1.positionType,
            recipient: core1.makerAddress,
            required: payout
        });
        ISSListing(listingAddress).ssUpdate(address(this), updates);

        exit.exitPrice = currentPrice;
        positionCore2[positionId].status2 = 1;
    }

    function setExitParams(
        uint256 positionId,
        uint256 stopLossPrice,
        uint256 takeProfitPrice
    ) internal {
        ExitParams storage exit = exitParams[positionId];
        exit.stopLossPrice = stopLossPrice;
        exit.takeProfitPrice = takeProfitPrice;
    }
}